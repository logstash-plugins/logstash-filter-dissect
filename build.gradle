import java.nio.file.Files

import static java.nio.file.StandardCopyOption.REPLACE_EXISTING

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }
}

plugins {
    id "me.champeau.gradle.jmh" version "0.3.1"
}
repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

apply plugin: 'java'
apply plugin: 'idea'

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:deprecation"
//        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }
}

group = 'org.logstash.dissect'
version "${new File("VERSION").text.trim()}"
description = """Dissect Filter, a Logstash plugin - the Java parts"""

project.sourceCompatibility = 1.8

compileJava.options.encoding = 'UTF-8'

task sourcesJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
    classifier 'sources'
    extension 'jar'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier 'javadoc'
    extension 'jar'
}

configurations.create('sources')
configurations.create('javadoc')
configurations.archives {
    extendsFrom configurations.sources
    extendsFrom configurations.javadoc
}

artifacts {
    sources(sourcesJar) {
        // Weird Gradle quirk where type will be used for the extension, but only for sources
        type 'jar'
    }

    javadoc(javadocJar) {
        type 'javadoc'
    }
}

configurations {
    provided
}

project.sourceSets {
    main.compileClasspath += project.configurations.provided
    main.runtimeClasspath += project.configurations.provided
    test.compileClasspath += project.configurations.provided
    test.runtimeClasspath += project.configurations.provided
}
project.javadoc.classpath += project.configurations.provided

idea {
    module {
        scopes.PROVIDED.plus += [project.configurations.provided]
    }
}

// logstashCoreGemPath and logstashCoreEventGemPath comes from the gradle.properties file
// the gradle.properties file is built by the Rake task bundle_install
// See BUILD_INSTRUCTIONS.md
dependencies {
    provided group: "org.apache.logging.log4j", name: "log4j-api", version: "2.6.2"
    provided group: "org.apache.logging.log4j", name: "log4j-core", version: "2.6.2"
    provided 'org.jruby:jruby-core:9.1.12.0'
    provided fileTree(dir: logstashCoreGemPath, include: '**/*.jar')
    testCompile 'junit:junit:4.12'
    testCompile 'org.assertj:assertj-core:3.8.0'
    jmhCompile fileTree(dir: logstashCoreGemPath, include: '**/*.jar')
}

// See http://www.gradle.org/docs/current/userguide/gradle_wrapper.html
task wrapper(type: Wrapper) {
    description = 'Install Gradle wrapper'
    gradleVersion = '2.8'
}

task generateGemJarRequiresFile {
    doLast {
        File jars_file = file("lib/${project.name}_jars.rb")
        jars_file.newWriter().withWriter { w ->
            w << "# AUTOGENERATED BY THE GRADLE SCRIPT. DO NOT EDIT.\n\n"
            w << "require \'jar_dependencies\'\n"
            configurations.runtime.allDependencies.each {
                w << "require_jar(\'${it.group}\', \'${it.name}\', \'${it.version}\')\n"
            }
            w << "require_jar(\'${project.group}\', \'${project.name}\', \'${project.version}\')\n"
        }
    }
}

task vendor {
    doLast {
        String vendorPathPrefix = "vendor/jars"
        String projectGroupPath = project.group.replaceAll('\\.', '/')
        File projectJarFile = file("${vendorPathPrefix}/${projectGroupPath}/${project.name}/${project.version}/${project.name}-${project.version}.jar")
        projectJarFile.mkdirs()
        Files.copy(file("$buildDir/libs/${project.name}-${project.version}.jar").toPath(), projectJarFile.toPath(), REPLACE_EXISTING)
        println "-----------------> Vendored jar to: ${projectJarFile.getCanonicalPath()}"
    }
}

vendor.dependsOn(jar, generateGemJarRequiresFile)
